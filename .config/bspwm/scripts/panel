#!/bin/sh

# Load panel configuration
. "$BSPWM_CONFIG/panel.cfg"

# Set PATH for scripts
PATH="${HOME}/.scripts:$PATH"

if [ $(pgrep -cx panel) -gt 1 ] ; then
	printf "%s\n" "The panel is already running." >&2
	pkill -x panel
fi

trap 'trap - TERM; kill 0' INT TERM QUIT EXIT

[ -e "$PANEL_FIFO" ] && rm "$PANEL_FIFO"
mkfifo -m 600 "$PANEL_FIFO"

bspc config top_padding $((`bspc config top_padding` + BARHEIGHT + EDGEWIDTH))
bspc control --subscribe > "$PANEL_FIFO" &

# Active window information
while true; do
	# Interval between checks in seconds
	wait=0.1
	# Create line
	title_line="TTL"
	# Get title
	win_title="$(xdotool getactivewindow getwindowname 2>/dev/null)"
	# Cut long titles
	if [ ${#win_title} -gt 80 ]; then
		win_title="$(echo $win_title \
		    | awk  '{ string=substr($0, 1, 77); print string; }')..."
	fi
	title_line="${title_line} ${win_title}"

	# Dump information to file
	echo "$title_line" > "$PANEL_FIFO"

	# Wait before repeating
	sleep $wait
done &

# System information
while true; do
	# Interval between checks in seconds
	wait=0.2
	# Create line
	sys_line="SYS"
	# cpu information
	cpu_info=$(getCPU.sh -e %) \
	    && sys_line="${sys_line} %{A:urxvtc -name Htop -e htop --sort-key PERCENT_cpu:}%{F$COLOR_FREE_FG}cpu%{F-} ${cpu_info}%{A}"
	# Memory information
	mem_info=$(getMem.sh -e %) \
	    && sys_line="${sys_line} %{A:urxvtc -name Htop -e htop --sort-key PERCENT_MEM:}%{F$COLOR_FREE_FG}ram%{F-} ${mem_info}%{A}"

	# Dump information to file
	echo "$sys_line" > "$PANEL_FIFO"

	# Wait before repeating
	sleep $wait
done &

# Network information
while true; do
	# Interval between checks in seconds
	wait=0.2
	# Create line
	net_line="NET"
	# Network information
	net_info=$(getNetwork.sh) \
	    && net_line="${net_line} %{A:urxvtc -name IFConfig -g 80x40 -e bash -c \"/sbin/ifconfig 2>/dev/null && read -rsp 'Press any key to continue...' -n 1 key\":}%{F$COLOR_FREE_FG}net%{F-} ${net_info}%{A}"

	# Dump information to file
	echo "$net_line" > "$PANEL_FIFO"

	# Wait before repeating
	sleep $wait
done &

# Power information
while true; do
	# Interval between checks in seconds
	wait=0.2
	# Create line
	pwr_line="PWR"
	# Power information
	bat_info=$(getBattery.sh -e %) \
	    && pwr_line="${pwr_line} %{F$COLOR_FREE_FG}bat%{F-} ${bat_info}"

	# Dump information to file
	echo "$pwr_line" > "$PANEL_FIFO"

	# Wait before repeating
	sleep $wait
done &

# Volume information
while true; do
	# Interval between checks in seconds
	wait=0.2
	# Create line
	vol_line="VOL"
	# Volume information
	vol_info=$(getVolume.sh -e % Master) \
	    && vol_line="${vol_line} %{A1:urxvtc -name Mixer -g 80x40 -e alsamixer:}%{A2:amixer -q sset Master toggle:}%{A4:amixer -q sset Master 2%+:}%{A5:amixer -q sset Master 2%-:}%{F$COLOR_FREE_FG}vol%{F-} ${vol_info}%{A}%{A}%{A}%{A}"

	# Dump information to file
	echo "$vol_line" > "$PANEL_FIFO"

	# Wait before repeating
	sleep $wait
done &

# Date information
while true; do
	# Interval between checks in seconds
	wait=0.2
	# Create line
	clk_line="CLK"
	# Date information
	date_info=$(getDate.sh) \
	    && clk_line="${clk_line} %{F$COLOR_FREE_FG}clk%{F-} $date_info "

	# Dump information to file
	echo "$clk_line" > "$PANEL_FIFO"

	# Wait before repeating
	sleep $wait
done &

# Music Player Daemon information
while true; do
	# Interval between checks in seconds
	wait=1
	# Create line
	mpd_line="MPD"
	# MPD information
	mpd_info=$(getSong.sh) \
	    && mpd_line="${mpd_line} %{A1:urxvtc -name MPC -e ncmpcpp:}%{A2:mpc toggle:}%{A4:mpc prev:}%{A5:mpc next:}%{F$COLOR_FREE_FG}mpd%{F-} $mpd_info%{A}%{A}%{A}%{A}"

	# Dump information to file
	echo "$mpd_line" > "$PANEL_FIFO"

	# Wait before repeating
	sleep $wait
done &

# OpenWeatherMap information
while true; do
	# Interval between checks in seconds
	wait=300
	# Create line
	owm_line="OWM"
	# Temperature information
	temp_info=$(getWeather.sh 3119841) \
	    && owm_line="${owm_line} %{A:xdg-open http\://openweathermap.org/city/3119841 &:}%{F$COLOR_FREE_FG}tem%{F-} ${temp_info}%{A}"

	# Dump information to file
	echo "$owm_line" > "$PANEL_FIFO"

	# Wait before repeating
	sleep $wait
done &

# ToDo information
while true; do
	# Interval between checks in seconds
	wait=0.2
	# Create line
	tsk_line="TSK"
	# ToDo information
	tasks_info=$(getTasks.sh) \
	    && tsk_line="${tsk_line} %{A:gvim -o ~/todo.txt ~/done.txt:}%{F$COLOR_FREE_FG}tsk%{F-} ${tasks_info}%{A}"

	# Dump information to file
	echo "$tsk_line" > "$PANEL_FIFO"

	# Wait before repeating
	sleep $wait
done &

# Mail information
while true; do
	# Interval between checks in seconds
	wait=30
	# Create line
	msg_line="MSG"
	# Mail messages
	msg_info=$(getMail.sh) \
	    && msg_line="${msg_line} %{A:urxvtc -name Mutt -e env LANG=en_US.UTF-8 mutt:}%{F$COLOR_FREE_FG}msg%{F-} $msg_info%{A}"

	# Dump information to file
	echo "$msg_line" > "$PANEL_FIFO"

	# Wait before repeating
	sleep $wait
done &

cat "$PANEL_FIFO" | "$BSPWM_CONFIG/scripts/panel_bar" | lemonbar \
    -g ${BARWIDTH}x${BARHEIGHT}+${EDGEWIDTH}+${EDGEWIDTH} -f "$PANEL_FONT_FAMILY" \
    -F "$COLOR_FOREGROUND" -B "$COLOR_BACKGROUND" -u "$UNDERLINE_WIDTH" | sh &

wait

exit
# vim: set ts=8 sw=8 tw=0 noet :
