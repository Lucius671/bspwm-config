#!/bin/sh

# Load panel configuration
. ~/.config/bspwm/panel.cfg

if [ $(pgrep -cx panel) -gt 1 ] ; then
	printf "%s\n" "The panel is already running." >&2
	pkill -x panel
fi

trap 'trap - TERM; kill 0' INT TERM QUIT EXIT

[ -e "$PANEL_FIFO" ] && rm "$PANEL_FIFO"
mkfifo -m 600 "$PANEL_FIFO"

bspc config top_padding $((BARHEIGHT + EDGEWIDTH))
bspc control --subscribe > "$PANEL_FIFO" &


# Get power information
getBattery() {
	# Get battery status
	BATSTATUS="$(acpi --battery)" || return 1
	# Get battery level
	BATLVL="$(echo $BATSTATUS | sed -n 's/.* \([0-9]\+%\),.*/\1/p')"
	# Check if it's charging
	if echo $BATSTATUS | grep -o 'Charging' >/dev/null; then
		echo "[on]"
	elif echo $BATSTATUS | grep -o 'Discharging' >/dev/null; then
		# Print battery level
		echo "$BATLVL"
	else
		return 1
	fi
}

# Get volume information
getVolume() {
	# Mixer control
	CTRL="${1-Master}"
	# Get volume status
	VOLSTATUS="$(amixer sget $CTRL)" || return 1
	# Get volume level
	VOLLVL="$(echo $VOLSTATUS | sed -n 's/^.*\[\([0-9]\+\)%.*$/\1/p' | uniq)%%"
	# Check if it's muted
	if echo $VOLSTATUS | grep -o '\[off\]' >/dev/null; then
		echo "[m]"
	elif echo $VOLSTATUS | grep -o '\[on\]' >/dev/null; then
		echo "$VOLLVL"
	else
		return 1
	fi
}

# Get MPD information
getSong() {
	# Get MPD status and exit if not running
	MPDSTATUS="$(mpc status)" || return 1
	# Get song information
	MPDSONG="$(mpc current --format '[[[%artist% - ][%title% ][\[%album%\]]]|[%file%]]')"
	# Check if it's playing
	if [ "$(echo $MPDSTATUS | awk '/\[playing\]/{print $1}')" ]; then
		echo $MPDSONG
	elif [ "$(echo $MPDSTATUS | awk '/\[paused]/{print $1}')" ]; then
		echo "[paused] $MPDSONG"
	else
		echo "[stopped]"
	fi
}

# Active window information
while true; do
	# Interval between checks in seconds
	WAIT=0.1
	# Create line
	TITLELINE="T"
	# Get Window ID
	WINID=$(xprop -root 32x '\t$0' _NET_ACTIVE_WINDOW | awk '{print $2}')
	# Get title
	TITLE=$(xprop -id $WINID _NET_WM_ICON_NAME | sed -n 's/.*"\(.*\)"/\1/p')
	[ "$TITLE" ] \
	    && TITLELINE="${TITLELINE} ${TITLE}"

	# Dump information to file
	echo "$TITLELINE" > "$PANEL_FIFO"

	# Wait before repeating
	sleep $WAIT
done &

# System information
while true; do
	# Interval between checks in seconds
	WAIT=0.5
	# Create line
	SYSLINE="S"
	# ToDo information
	TSK=$(grep -E '^\(.\)' ~/todo.txt | wc -l)
	[ "$TSK" ] \
	    && SYSLINE="${SYSLINE} %{A:gvim -o ~/todo.txt ~/done.txt:}%{F$COLOR_FREE_FG}tsk%{F-} ${TSK}%{A}"
	# CPU information
	CPU=$(awk '/cpu/{cpu_usage=($2+$4)*100/($2+$4+$5)} END {print int(cpu_usage)}' < /proc/stat)
	[ "$CPU" ] \
	    && SYSLINE="${SYSLINE} %{A:urxvtc -e htop --sort-key PERCENT_CPU:}%{F$COLOR_FREE_FG}cpu%{F-} ${CPU}%%%{A}"
	# Memory information
	RAM=$(free | awk 'FNR == 3 {print int($3/($3+$4)*100)}')
	[ "$RAM" ] \
	    && SYSLINE="${SYSLINE} %{A:urxvtc -e htop --sort-key PERCENT_MEM:}%{F$COLOR_FREE_FG}ram%{F-} ${RAM}%%%{A}"
	# Power information
	BAT=$(getBattery) \
	    && SYSLINE="${SYSLINE} %{F$COLOR_FREE_FG}bat%{F-} ${BAT}"
	# Volume information
	VOL=$(getVolume Master) \
	    && SYSLINE="${SYSLINE} %{A1:urxvtc -e alsamixer:}%{A2:amixer -q sset Master toggle:}%{A4:amixer -q sset Master 2%+:}%{A5:amixer -q sset Master 2%-:}%{F$COLOR_FREE_FG}vol%{F-} ${VOL}%{A}%{A}%{A}%{A}"
	# Clock and date
	CLK=$(date +'%d %b %H:%M')
	[ "$CLK" ] \
	    && SYSLINE="${SYSLINE} %{F$COLOR_FREE_FG}clk%{F-} $CLK "

	# Dump information to file
	echo "$SYSLINE" > "$PANEL_FIFO"

	# Wait before repeating
	sleep $WAIT
done &

# Music Player Daemon information
while true; do
	# Interval between checks in seconds
	WAIT=1
	# Create line
	MPDLINE="M"
	# Add buttons to line
	MPD=$(getSong) \
	    && MPDLINE="${MPDLINE} %{A1:urxvtc -e ncmpcpp:}%{A2:mpc toggle:}%{A4:mpc prev:}%{A5:mpc next:}%{F$COLOR_FREE_FG}mpd%{F-} $MPD%{A}%{A}%{A}%{A}"

	# Dump information to file
	echo "$MPDLINE" > "$PANEL_FIFO"

	# Wait before repeating
	sleep $WAIT
done &

# Misc information
while true; do
	# Interval between checks in seconds
	WAIT=300
	# Create line
	MISCLINE="R"
	# Temperature information
	CITYID=3119841
	TEM=$(curl -s "http://api.openweathermap.org/data/2.5/weather?id=${CITYID}&mode=xml&units=metric" | sed -n 's/^.*temperature value="\([0-9]\+\)\(\.*[0-9]\{0,1\}\).*".*$/\1\2/p')
	[ "$TEM" ] \
	    && MISCLINE="${MISCLINE} %{A:xdg-open http\://openweathermap.org/city/${CITYID} &:}%{F$COLOR_FREE_FG}tem%{F-} $TEMÂ°%{A}"
	# Mail messages
	MSG=$(curl -s -n "https://mail.google.com/mail/feed/atom" | sed -n 's/^.*fullcount>\([0-9]\+\)<\/fullcount.*$/\1/p')
	[ "$MSG" ] \
	    && MISCLINE="${MISCLINE} %{A:urxvtc -e mutt:}%{F$COLOR_FREE_FG}msg%{F-} $MSG%{A}"

	# Dump information to file
	echo "$MISCLINE" > "$PANEL_FIFO"

	# Wait before repeating
	sleep $WAIT
done &

cat "$PANEL_FIFO" | ~/.config/bspwm/scripts/panel_bar | lemonbar \
    -g ${BARWIDTH}x${BARHEIGHT}+${EDGEWIDTH}+${EDGEWIDTH} -f "$PANEL_FONT_FAMILY" \
    -F "$COLOR_FOREGROUND" -B "$COLOR_BACKGROUND" -u "$UNDERLINE_WIDTH" | sh &

wait
# vim: set ts=8 sw=8 tw=0 noet :
